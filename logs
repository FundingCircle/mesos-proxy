#!/usr/bin/env ruby
require 'httparty'

class Logs
  HOST = ENV.fetch('HOST')
  DATA_TO_GET = ENV.fetch('DATA_LENGTH', '50000').to_i

  MARATHON_URL = "https://marathon.#{HOST}"
  MESOS_PROXY_SUBDOMAIN = 'web-mesos-proxy'
  HTTParty::Basement.default_options.update(verify: false)

  ApplicationNotFound = Class.new(StandardError)
  MesosStateNotFound = Class.new(StandardError)
  UnableToGetFile = Class.new(StandardError)
  MesosTaskHasNoHost = Class.new(StandardError)

  def initialize(marathon_name, cmd)
    @marathon_name = marathon_name
    @cmd = cmd || 'stdout'
  end

  attr_reader :marathon_name, :cmd

  def run
    begin
      raise ApplicationNotFound if marathon_name == '' || marathon_name == nil
      hosts = hosts_task_is_running_on(marathon_name)
    rescue ApplicationNotFound
      puts "Unable to find marathon task #{marathon_name}"
      puts 'Valid task names are:'
      puts available_apps
      exit 1
    end

    raise MesosTaskHasNoHost if hosts.empty?

    state = mesos_state(hosts.first)
    state = framework_state(state, marathon_framework_id)
    dir = directory_for(state, marathon_name)

    file_with_inital_offset = get_file(hosts.first, dir, cmd)
    initial_offset =  file_with_inital_offset['offset']
    offset = initial_offset - DATA_TO_GET
    offset = 0 if offset < 1
    while offset < initial_offset
      file = get_file(hosts.first, dir, cmd, offset, DATA_TO_GET)
      logs = file['data']

      offset = file['offset'] + logs.size

      line = 0
      logs.lines.each_with_index do |l, i|
        line = i if l.include?('Starting task')
      end

      logs.lines[line + 1, (logs.size - 1)].each {|l| puts l}
    end
  end

  def marathon_framework_id
    proxy_addr = "https://#{MESOS_PROXY_SUBDOMAIN}.#{HOST}/v2/info"
    response = HTTParty.get(proxy_addr, headers: {'X-Agent' => 'marathon.service.consul',
                                                  'X-Port' => '8080'}).parsed_response
    response['frameworkId']
  end

  def available_apps
    proxy_addr = "https://#{MESOS_PROXY_SUBDOMAIN}.#{HOST}/v2/apps"
    response = HTTParty.get(proxy_addr, headers: {'X-Agent' => 'marathon.service.consul',
                                                  'X-Port' => '8080'}).parsed_response
    response['apps'].map{|a| a['id'][1..-1]}
  end

  def application_information(task)
    proxy_addr = "https://#{MESOS_PROXY_SUBDOMAIN}.#{HOST}/v2/apps/#{task}"
    r = HTTParty.get(proxy_addr, headers: {'X-Agent' => 'marathon.service.consul',
                                           'X-Port' => '8080'})
    raise ApplicationNotFound.new(r) unless r.success?
    r.parsed_response
  end

  def hosts_task_is_running_on(task)
    application_information(task)['app']['tasks'].map{|t| t['host']}
  end

  def mesos_state(slave_addr)
    proxy_addr = "https://#{MESOS_PROXY_SUBDOMAIN}.#{HOST}/state.json"
    r = HTTParty.get(proxy_addr, headers: {'X-Agent' => slave_addr})
    raise MesosStateNotFound.new(r) unless r.success?
    r.parsed_response
  end

  def framework_state(mesos_state, framework_id)
    frameworks_info = mesos_state['frameworks'].select{|a| a['id'] == framework_id}
    puts "Found #{frameworks_info.size} framework state" if frameworks_info.size != 1
    frameworks_info.last
  end

  def directory_for(framework_info, app_name)
    dirs = framework_info['executors']
      .select{|e| e['id'].include?(app_name.split('/').first) && e['id'].include?(app_name.split('/').last)}
      .map{|e| e['directory']}

    puts "Found #{dirs.size} directories : #{dirs}" if dirs.size != 1

    dirs.first
  end

  def get_file(slave_addr, dir, file, offset=-1, length=-1)
    file_location = "https://#{MESOS_PROXY_SUBDOMAIN}.#{HOST}/files/read.json?path=#{dir}/#{file}&offset=#{offset}&length=#{length}"
    r = HTTParty.get(file_location, headers: {'X-Agent' => slave_addr})
    raise UnableToGetFile.new(r) unless r.success?
    r.parsed_response
  end
end

logs = Logs.new(ARGV[0], ARGV[1])
logs.run

